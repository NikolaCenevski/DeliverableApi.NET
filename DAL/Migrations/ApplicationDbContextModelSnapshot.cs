// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("DAL.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DAL.Models.CarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03bb1956-5b7d-444e-a339-31f7a34b1049"),
                            Type = "CAR"
                        },
                        new
                        {
                            Id = new Guid("f8a39cd8-821a-4959-b813-7f49c7e5869c"),
                            Type = "SEDAN"
                        },
                        new
                        {
                            Id = new Guid("0031908e-dd3f-48dd-a93d-6135be13f5df"),
                            Type = "SPORTS CAR"
                        },
                        new
                        {
                            Id = new Guid("f24c743c-79bb-4d16-8d12-880ba3b8103e"),
                            Type = "HATCHBACK"
                        },
                        new
                        {
                            Id = new Guid("761acaaa-28e7-4be2-96c8-6789a571cc92"),
                            Type = "CONVERTIBLE"
                        },
                        new
                        {
                            Id = new Guid("c8b99010-9519-4972-9f64-a89d44134eac"),
                            Type = "SPORT-UTILITY VEHICLE (SUV)"
                        },
                        new
                        {
                            Id = new Guid("06d5a5a3-dd76-45a2-8563-29bf82c29c38"),
                            Type = "MINIVAN"
                        },
                        new
                        {
                            Id = new Guid("d08627fb-3225-40ff-b0c2-d8380b4bc88e"),
                            Type = "PICKUP TRUCK"
                        },
                        new
                        {
                            Id = new Guid("aad27dcd-d4ee-4a9a-bbc5-62c243701928"),
                            Type = "TRUCK"
                        },
                        new
                        {
                            Id = new Guid("7e9a383d-22bc-425d-91b9-157b6b51f7bb"),
                            Type = "MOTORCYCLE"
                        },
                        new
                        {
                            Id = new Guid("d3ad2f78-29b6-4b5f-a945-b251d5a81a6d"),
                            Type = "STANDARD MOTORCYCLE"
                        },
                        new
                        {
                            Id = new Guid("d5299f10-7d8b-4699-8171-5549686bc7c4"),
                            Type = "CRUISER MOTORCYCLE"
                        },
                        new
                        {
                            Id = new Guid("d32e1a1a-d93c-494d-a818-5bf4f9d737fa"),
                            Type = "SPORT MOTORCYCLE"
                        });
                });

            modelBuilder.Entity("DAL.Models.Images", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("DAL.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DAL.Models.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ReportPostId");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("DAL.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DAL.Models.Relations.PostCarType", b =>
                {
                    b.Property<Guid>("CarTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarTypeId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCarTypes");
                });

            modelBuilder.Entity("DAL.Models.ReportPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("ReportPosts");
                });

            modelBuilder.Entity("DAL.Models.Images", b =>
                {
                    b.HasOne("DAL.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("DAL.Models.Post", b =>
                {
                    b.HasOne("DAL.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("car");
                });

            modelBuilder.Entity("DAL.Models.Reason", b =>
                {
                    b.HasOne("DAL.Models.AppUser", "appUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ReportPost", null)
                        .WithMany("Reasons")
                        .HasForeignKey("ReportPostId");

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("DAL.Models.RefreshToken", b =>
                {
                    b.HasOne("DAL.Models.AppUser", "appUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("DAL.Models.Relations.PostCarType", b =>
                {
                    b.HasOne("DAL.Models.CarType", "CarType")
                        .WithMany("PostCarTypes")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Post", "post")
                        .WithMany("PostCarTypes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("post");
                });

            modelBuilder.Entity("DAL.Models.ReportPost", b =>
                {
                    b.HasOne("DAL.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("DAL.Models.CarType", b =>
                {
                    b.Navigation("PostCarTypes");
                });

            modelBuilder.Entity("DAL.Models.Post", b =>
                {
                    b.Navigation("PostCarTypes");
                });

            modelBuilder.Entity("DAL.Models.ReportPost", b =>
                {
                    b.Navigation("Reasons");
                });
#pragma warning restore 612, 618
        }
    }
}
